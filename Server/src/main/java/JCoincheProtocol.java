// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JCoincheProtocol.proto

public final class JCoincheProtocol {
  private JCoincheProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Card)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .Card.CardColor color = 1;</code>
     */
    boolean hasColor();
    /**
     * <code>required .Card.CardColor color = 1;</code>
     */
    JCoincheProtocol.Card.CardColor getColor();

    /**
     * <code>required .Card.CardId id = 2;</code>
     */
    boolean hasId();
    /**
     * <code>required .Card.CardId id = 2;</code>
     */
    JCoincheProtocol.Card.CardId getId();
  }
  /**
   * Protobuf type {@code Card}
   */
  public  static final class Card extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Card)
      CardOrBuilder {
    // Use Card.newBuilder() to construct.
    private Card(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Card() {
      color_ = 0;
      id_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Card(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              JCoincheProtocol.Card.CardColor value = JCoincheProtocol.Card.CardColor.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                color_ = rawValue;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              JCoincheProtocol.Card.CardId value = JCoincheProtocol.Card.CardId.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                id_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return JCoincheProtocol.internal_static_Card_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return JCoincheProtocol.internal_static_Card_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              JCoincheProtocol.Card.class, JCoincheProtocol.Card.Builder.class);
    }

    /**
     * Protobuf enum {@code Card.CardColor}
     */
    public enum CardColor
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SPADE = 0;</code>
       */
      SPADE(0),
      /**
       * <code>HEART = 1;</code>
       */
      HEART(1),
      /**
       * <code>DIAMOND = 2;</code>
       */
      DIAMOND(2),
      /**
       * <code>CLUB = 3;</code>
       */
      CLUB(3),
      ;

      /**
       * <code>SPADE = 0;</code>
       */
      public static final int SPADE_VALUE = 0;
      /**
       * <code>HEART = 1;</code>
       */
      public static final int HEART_VALUE = 1;
      /**
       * <code>DIAMOND = 2;</code>
       */
      public static final int DIAMOND_VALUE = 2;
      /**
       * <code>CLUB = 3;</code>
       */
      public static final int CLUB_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CardColor valueOf(int value) {
        return forNumber(value);
      }

      public static CardColor forNumber(int value) {
        switch (value) {
          case 0: return SPADE;
          case 1: return HEART;
          case 2: return DIAMOND;
          case 3: return CLUB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CardColor>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CardColor> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CardColor>() {
              public CardColor findValueByNumber(int number) {
                return CardColor.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return JCoincheProtocol.Card.getDescriptor().getEnumTypes().get(0);
      }

      private static final CardColor[] VALUES = values();

      public static CardColor valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CardColor(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Card.CardColor)
    }

    /**
     * Protobuf enum {@code Card.CardId}
     */
    public enum CardId
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACE = 0;</code>
       */
      ACE(0),
      /**
       * <code>SEVEN = 1;</code>
       */
      SEVEN(1),
      /**
       * <code>EIGHT = 2;</code>
       */
      EIGHT(2),
      /**
       * <code>NINE = 3;</code>
       */
      NINE(3),
      /**
       * <code>TEN = 4;</code>
       */
      TEN(4),
      /**
       * <code>JACK = 5;</code>
       */
      JACK(5),
      /**
       * <code>QUEEN = 6;</code>
       */
      QUEEN(6),
      /**
       * <code>KING = 7;</code>
       */
      KING(7),
      ;

      /**
       * <code>ACE = 0;</code>
       */
      public static final int ACE_VALUE = 0;
      /**
       * <code>SEVEN = 1;</code>
       */
      public static final int SEVEN_VALUE = 1;
      /**
       * <code>EIGHT = 2;</code>
       */
      public static final int EIGHT_VALUE = 2;
      /**
       * <code>NINE = 3;</code>
       */
      public static final int NINE_VALUE = 3;
      /**
       * <code>TEN = 4;</code>
       */
      public static final int TEN_VALUE = 4;
      /**
       * <code>JACK = 5;</code>
       */
      public static final int JACK_VALUE = 5;
      /**
       * <code>QUEEN = 6;</code>
       */
      public static final int QUEEN_VALUE = 6;
      /**
       * <code>KING = 7;</code>
       */
      public static final int KING_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CardId valueOf(int value) {
        return forNumber(value);
      }

      public static CardId forNumber(int value) {
        switch (value) {
          case 0: return ACE;
          case 1: return SEVEN;
          case 2: return EIGHT;
          case 3: return NINE;
          case 4: return TEN;
          case 5: return JACK;
          case 6: return QUEEN;
          case 7: return KING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CardId>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CardId> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CardId>() {
              public CardId findValueByNumber(int number) {
                return CardId.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return JCoincheProtocol.Card.getDescriptor().getEnumTypes().get(1);
      }

      private static final CardId[] VALUES = values();

      public static CardId valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CardId(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Card.CardId)
    }

    private int bitField0_;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <code>required .Card.CardColor color = 1;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .Card.CardColor color = 1;</code>
     */
    public JCoincheProtocol.Card.CardColor getColor() {
      JCoincheProtocol.Card.CardColor result = JCoincheProtocol.Card.CardColor.valueOf(color_);
      return result == null ? JCoincheProtocol.Card.CardColor.SPADE : result;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <code>required .Card.CardId id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .Card.CardId id = 2;</code>
     */
    public JCoincheProtocol.Card.CardId getId() {
      JCoincheProtocol.Card.CardId result = JCoincheProtocol.Card.CardId.valueOf(id_);
      return result == null ? JCoincheProtocol.Card.CardId.ACE : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, color_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, id_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, color_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, id_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof JCoincheProtocol.Card)) {
        return super.equals(obj);
      }
      JCoincheProtocol.Card other = (JCoincheProtocol.Card) obj;

      boolean result = true;
      result = result && (hasColor() == other.hasColor());
      if (hasColor()) {
        result = result && color_ == other.color_;
      }
      result = result && (hasId() == other.hasId());
      if (hasId()) {
        result = result && id_ == other.id_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasColor()) {
        hash = (37 * hash) + COLOR_FIELD_NUMBER;
        hash = (53 * hash) + color_;
      }
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + id_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static JCoincheProtocol.Card parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static JCoincheProtocol.Card parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static JCoincheProtocol.Card parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static JCoincheProtocol.Card parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static JCoincheProtocol.Card parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static JCoincheProtocol.Card parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static JCoincheProtocol.Card parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static JCoincheProtocol.Card parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static JCoincheProtocol.Card parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static JCoincheProtocol.Card parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(JCoincheProtocol.Card prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Card}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Card)
        JCoincheProtocol.CardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return JCoincheProtocol.internal_static_Card_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return JCoincheProtocol.internal_static_Card_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                JCoincheProtocol.Card.class, JCoincheProtocol.Card.Builder.class);
      }

      // Construct using JCoincheProtocol.Card.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return JCoincheProtocol.internal_static_Card_descriptor;
      }

      public JCoincheProtocol.Card getDefaultInstanceForType() {
        return JCoincheProtocol.Card.getDefaultInstance();
      }

      public JCoincheProtocol.Card build() {
        JCoincheProtocol.Card result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public JCoincheProtocol.Card buildPartial() {
        JCoincheProtocol.Card result = new JCoincheProtocol.Card(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof JCoincheProtocol.Card) {
          return mergeFrom((JCoincheProtocol.Card)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(JCoincheProtocol.Card other) {
        if (other == JCoincheProtocol.Card.getDefaultInstance()) return this;
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasColor()) {
          return false;
        }
        if (!hasId()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        JCoincheProtocol.Card parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (JCoincheProtocol.Card) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int color_ = 0;
      /**
       * <code>required .Card.CardColor color = 1;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .Card.CardColor color = 1;</code>
       */
      public JCoincheProtocol.Card.CardColor getColor() {
        JCoincheProtocol.Card.CardColor result = JCoincheProtocol.Card.CardColor.valueOf(color_);
        return result == null ? JCoincheProtocol.Card.CardColor.SPADE : result;
      }
      /**
       * <code>required .Card.CardColor color = 1;</code>
       */
      public Builder setColor(JCoincheProtocol.Card.CardColor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        color_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .Card.CardColor color = 1;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        onChanged();
        return this;
      }

      private int id_ = 0;
      /**
       * <code>required .Card.CardId id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .Card.CardId id = 2;</code>
       */
      public JCoincheProtocol.Card.CardId getId() {
        JCoincheProtocol.Card.CardId result = JCoincheProtocol.Card.CardId.valueOf(id_);
        return result == null ? JCoincheProtocol.Card.CardId.ACE : result;
      }
      /**
       * <code>required .Card.CardId id = 2;</code>
       */
      public Builder setId(JCoincheProtocol.Card.CardId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        id_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .Card.CardId id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Card)
    }

    // @@protoc_insertion_point(class_scope:Card)
    private static final JCoincheProtocol.Card DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new JCoincheProtocol.Card();
    }

    public static JCoincheProtocol.Card getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Card>
        PARSER = new com.google.protobuf.AbstractParser<Card>() {
      public Card parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Card(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Card> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Card> getParserForType() {
      return PARSER;
    }

    public JCoincheProtocol.Card getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Card_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Card_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026JCoincheProtocol.proto\"\325\001\n\004Card\022\036\n\005col" +
      "or\030\001 \002(\0162\017.Card.CardColor\022\030\n\002id\030\002 \002(\0162\014." +
      "Card.CardId\"8\n\tCardColor\022\t\n\005SPADE\020\000\022\t\n\005H" +
      "EART\020\001\022\013\n\007DIAMOND\020\002\022\010\n\004CLUB\020\003\"Y\n\006CardId\022" +
      "\007\n\003ACE\020\000\022\t\n\005SEVEN\020\001\022\t\n\005EIGHT\020\002\022\010\n\004NINE\020\003" +
      "\022\007\n\003TEN\020\004\022\010\n\004JACK\020\005\022\t\n\005QUEEN\020\006\022\010\n\004KING\020\007" +
      "B\022B\020JCoincheProtocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Card_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Card_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Card_descriptor,
        new java.lang.String[] { "Color", "Id", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
